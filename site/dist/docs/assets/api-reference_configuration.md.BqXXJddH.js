import{_ as e,c as o,o as a,a3 as t}from"./chunks/framework.Cyte3X77.js";const k=JSON.parse('{"title":"Configuration","description":"","frontmatter":{},"headers":[],"relativePath":"api-reference/configuration.md","filePath":"api-reference/configuration.md","lastUpdated":null}'),i={name:"api-reference/configuration.md"},s=t('<h1 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h1><p>A configuration can be used to customize the <a href="./javascript-api#proiconsreplacerootelm-element-config-proiconreplaceconfig-void"><code>proicons.replace()</code></a> method. To use a configuration, pass the configuration as the second argument when calling <code>proicons.replace()</code>.</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">proicons.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document.body, {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Example configuration</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    color: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#ff0000&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cornerRadius: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><h3 id="color-string" tabindex="-1"><code>color</code>: string <a class="header-anchor" href="#color-string" aria-label="Permalink to &quot;`color`: string&quot;">​</a></h3><p>Determines the color of the icons. Defaults to <code>currentColor</code></p><h3 id="strokewidth-number" tabindex="-1"><code>strokeWidth</code>: number <a class="header-anchor" href="#strokewidth-number" aria-label="Permalink to &quot;`strokeWidth`: number&quot;">​</a></h3><p>Determines the default stroke width of the icon. Defaults to <code>1.5</code>. This only works on SVG elements with existing strokes; add <code>strokeFilledElements</code> for this property to affect such elements.</p><h3 id="strokefilledelements-boolean" tabindex="-1"><code>strokeFilledElements</code>: boolean <a class="header-anchor" href="#strokefilledelements-boolean" aria-label="Permalink to &quot;`strokeFilledElements`: boolean&quot;">​</a></h3><p>Apply strokes to filled SVG elements, such as circles, by the provided amount with <code>1.5</code> (default stroke value) subtracted, if <code>strokeWidth</code> is set to a value above <code>1.5</code>. Defaults to <code>false</code></p><p>For example, if <code>strokeWidth</code> is set to <code>2</code>, filled SVG elements will have an additional <code>0.5</code>px stroke</p><h3 id="strokecaps-round-square-butt" tabindex="-1"><code>strokeCaps</code>: <code>&#39;round&#39;</code> | <code>&#39;square&#39;</code> | <code>&#39;butt&#39;</code> <a class="header-anchor" href="#strokecaps-round-square-butt" aria-label="Permalink to &quot;`strokeCaps`: `&#39;round&#39;` | `&#39;square&#39;` | `&#39;butt&#39;`&quot;">​</a></h3><p>Defines the shape to be used for stroke caps. Defaults to <code>round</code></p><h3 id="strokejoin-round-miter-bevel" tabindex="-1"><code>strokeJoin</code>: <code>&#39;round&#39;</code> | <code>&#39;miter&#39;</code> | <code>&#39;bevel&#39;</code> <a class="header-anchor" href="#strokejoin-round-miter-bevel" aria-label="Permalink to &quot;`strokeJoin`: `&#39;round&#39;` | `&#39;miter&#39;` | `&#39;bevel&#39;`&quot;">​</a></h3><p>Defines the shape to be used for stroke joins. Defaults to <code>round</code></p><h3 id="cornerradius-number" tabindex="-1"><code>cornerRadius</code>: number <a class="header-anchor" href="#cornerradius-number" aria-label="Permalink to &quot;`cornerRadius`: number&quot;">​</a></h3><p>Determines the corner radius of SVG elements. Does not apply to all rounded elements.</p><h3 id="attributename-string" tabindex="-1"><code>attributeName</code>: string <a class="header-anchor" href="#attributename-string" aria-label="Permalink to &quot;`attributeName`: string&quot;">​</a></h3><p>The attribute name that is checked for when converting elements to icons. Defaults to <code>proicon</code></p><h3 id="overwrite-boolean-auto" tabindex="-1"><code>overwrite</code>: boolean | <code>&#39;auto&#39;</code> <a class="header-anchor" href="#overwrite-boolean-auto" aria-label="Permalink to &quot;`overwrite`: boolean | `&#39;auto&#39;`&quot;">​</a></h3><p>Determines whether to overwrite elements when converting to icons. Setting this to <code>auto</code> will overwrite only if the element does not have any children. Defaults to <code>auto</code>.</p><h3 id="useattributes-false" tabindex="-1"><code>useAttributes</code>: false <a class="header-anchor" href="#useattributes-false" aria-label="Permalink to &quot;`useAttributes`: false&quot;">​</a></h3><p>Determines whether to apply existing HTML attributes such as styles to the converted SVGs. Defaults to <code>true</code></p><h2 id="see-also" tabindex="-1">See also <a class="header-anchor" href="#see-also" aria-label="Permalink to &quot;See also&quot;">​</a></h2><ul><li><a href="./javascript-api#proiconsreplacerootelm-element-config-proiconreplaceconfig-void">proicons.replace()</a></li><li><a href="./javascript-api">JavaScript ProIcons API</a></li><li><a href="./html-api#attributes">HTML Attributes</a></li></ul>',25),r=[s];function n(l,c,d,h,u,p){return a(),o("div",null,r)}const b=e(i,[["render",n]]);export{k as __pageData,b as default};
